{
	"info": {
		"_postman_id": "auth-api-collection",
		"name": "Auth API",
		"description": "Coleção de testes para a API de autenticação",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"url": {
					"raw": "http://localhost:8080/health",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["health"]
				}
			},
			"response": []
		},
		{
			"name": "Criar Usuário",
			"request": {
				"method": "POST",
				"url": {
					"raw": "http://localhost:8080/users/create",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "create"]
				},
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Teste Usuario\",\n    \"lastName\": \"Teste Sobrenome\",\n    \"email\": \"teste@email.com\",\n    \"password\": \"senha123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('lastName');",
							"    pm.expect(jsonData).to.have.property('email');",
							"});",
							"",
							"// Salva o ID do usuário para testes posteriores",
							"if (pm.response.json().id) {",
							"    pm.environment.set(\"user_id\", pm.response.json().id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"url": {
					"raw": "http://localhost:8080/users/login",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "login"]
				},
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"teste@email.com\",\n    \"password\": \"senha123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"});",
							"",
							"if (pm.response.json().token) {",
							"    pm.environment.set(\"auth_token\", pm.response.json().token);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Buscar Usuário (Primeira Chamada)",
			"request": {
				"method": "GET",
				"url": {
					"raw": "http://localhost:8080/users/fetch",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "fetch"]
				},
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				]
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('lastName');",
							"    pm.expect(jsonData).to.have.property('email');",
							"});",
							"",
							"pm.test(\"Response is not cached\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('cached');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Buscar Usuário (Segunda Chamada - Deve estar em cache)",
			"request": {
				"method": "GET",
				"url": {
					"raw": "http://localhost:8080/users/fetch",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "fetch"]
				},
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				]
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is cached\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('cached', true);",
							"});",
							"",
							"pm.test(\"Cached data matches original\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', pm.environment.get('user_id'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Atualizar Usuário",
			"request": {
				"method": "PUT",
				"url": {
					"raw": "http://localhost:8080/users/update",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "update"]
				},
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Nome Atualizado\",\n    \"lastName\": \"Sobrenome Atualizado\",\n    \"email\": \"atualizado@email.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has updated data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name', 'Nome Atualizado');",
							"    pm.expect(jsonData).to.have.property('lastName', 'Sobrenome Atualizado');",
							"    pm.expect(jsonData).to.have.property('email', 'atualizado@email.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Buscar Usuário (Após Atualização - Cache deve estar inválido)",
			"request": {
				"method": "GET",
				"url": {
					"raw": "http://localhost:8080/users/fetch",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "fetch"]
				},
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				]
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is not cached after update\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.have.property('cached');",
							"});",
							"",
							"pm.test(\"Data is updated in database\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name', 'Nome Atualizado');",
							"    pm.expect(jsonData).to.have.property('lastName', 'Sobrenome Atualizado');",
							"    pm.expect(jsonData).to.have.property('email', 'atualizado@email.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Deletar Usuário",
			"request": {
				"method": "DELETE",
				"url": {
					"raw": "http://localhost:8080/users/{{user_id}}/delete",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "{{user_id}}", "delete"]
				},
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				]
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Verificar Persistência (Após Reiniciar Container)",
			"request": {
				"method": "GET",
				"url": {
					"raw": "http://localhost:8080/users/fetch",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["users", "fetch"]
				},
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Reinicia os containers para testar persistência",
							"pm.sendRequest({",
							"    url: 'http://localhost:8080/health',",
							"    method: 'GET',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data persists after container restart\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	]
} 